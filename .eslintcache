[{"/home/jonganebski/github/nodcast-front/src/index.tsx":"1","/home/jonganebski/github/nodcast-front/src/apollo.ts":"2","/home/jonganebski/github/nodcast-front/src/constants.ts":"3","/home/jonganebski/github/nodcast-front/src/routers/logged-in-router.tsx":"4","/home/jonganebski/github/nodcast-front/src/routers/logged-out-router.tsx":"5","/home/jonganebski/github/nodcast-front/src/pages/Home.tsx":"6","/home/jonganebski/github/nodcast-front/src/pages/Auth.tsx":"7","/home/jonganebski/github/nodcast-front/src/__generated__/globalTypes.ts":"8","/home/jonganebski/github/nodcast-front/src/components/FormError.tsx":"9","/home/jonganebski/github/nodcast-front/src/components/Header.tsx":"10","/home/jonganebski/github/nodcast-front/src/pages/Podcast.tsx":"11","/home/jonganebski/github/nodcast-front/src/helpers.ts":"12","/home/jonganebski/github/nodcast-front/src/components/App.tsx":"13","/home/jonganebski/github/nodcast-front/src/components/PodcastBlock.tsx":"14","/home/jonganebski/github/nodcast-front/src/components/PodcastBlockSkeleton.tsx":"15","/home/jonganebski/github/nodcast-front/src/components/EpisodeBlock.tsx":"16","/home/jonganebski/github/nodcast-front/src/components/EpisodeBlockSkeleton.tsx":"17","/home/jonganebski/github/nodcast-front/src/hooks/useSearchPodcastsQuery.tsx":"18","/home/jonganebski/github/nodcast-front/src/hooks/useMeQuery.tsx":"19","/home/jonganebski/github/nodcast-front/src/pages/Hosts/Home.tsx":"20","/home/jonganebski/github/nodcast-front/src/components/CategorySection.tsx":"21","/home/jonganebski/github/nodcast-front/src/components/Button.tsx":"22","/home/jonganebski/github/nodcast-front/src/components/ReviewsDrawer.tsx":"23","/home/jonganebski/github/nodcast-front/src/components/RatingStars.tsx":"24","/home/jonganebski/github/nodcast-front/src/components/ReviewBlock.tsx":"25","/home/jonganebski/github/nodcast-front/src/hooks/useGetReviewsQuery.tsx":"26","/home/jonganebski/github/nodcast-front/src/components/ReviewForm.tsx":"27","/home/jonganebski/github/nodcast-front/src/components/EditProfileModal.tsx":"28","/home/jonganebski/github/nodcast-front/src/components/AuthFormInputs.tsx":"29","/home/jonganebski/github/nodcast-front/src/pages/Subscriptions.tsx":"30","/home/jonganebski/github/nodcast-front/src/fragments.ts":"31","/home/jonganebski/github/nodcast-front/src/pages/Feeds.tsx":"32","/home/jonganebski/github/nodcast-front/src/components/PodcastCover.tsx":"33","/home/jonganebski/github/nodcast-front/src/pages/Episode.tsx":"34","/home/jonganebski/github/nodcast-front/src/hooks/useGetPodcastQuery.tsx":"35","/home/jonganebski/github/nodcast-front/src/components/PodcastForm.tsx":"36","/home/jonganebski/github/nodcast-front/src/hooks/mutations/useCreatePodcastMutation.tsx":"37","/home/jonganebski/github/nodcast-front/src/pages/Hosts/Episodes.tsx":"38","/home/jonganebski/github/nodcast-front/src/hooks/mutations/useCreateEpisodeMutation.tsx":"39","/home/jonganebski/github/nodcast-front/src/hooks/queries/useGetEpisodesQuery.tsx":"40","/home/jonganebski/github/nodcast-front/src/components/EpisodeForm.tsx":"41","/home/jonganebski/github/nodcast-front/src/hooks/mutations/useEditEpisodeMutation.tsx":"42","/home/jonganebski/github/nodcast-front/src/api/uploadFile.ts":"43","/home/jonganebski/github/nodcast-front/src/components/ButtonWide.tsx":"44","/home/jonganebski/github/nodcast-front/src/components/Alert.tsx":"45","/home/jonganebski/github/nodcast-front/src/hooks/mutations/useDeleteEpisodeMutation.tsx":"46"},{"size":512,"mtime":1612314416400,"results":"47","hashOfConfig":"48"},{"size":978,"mtime":1613033528986,"results":"49","hashOfConfig":"48"},{"size":1953,"mtime":1613033541706,"results":"50","hashOfConfig":"48"},{"size":1669,"mtime":1613040289066,"results":"51","hashOfConfig":"48"},{"size":371,"mtime":1612957810995,"results":"52","hashOfConfig":"48"},{"size":1728,"mtime":1612944094895,"results":"53","hashOfConfig":"48"},{"size":6322,"mtime":1612934377145,"results":"54","hashOfConfig":"48"},{"size":1895,"mtime":1613052155336,"results":"55","hashOfConfig":"48"},{"size":220,"mtime":1612315663360,"results":"56","hashOfConfig":"48"},{"size":5653,"mtime":1613055356986,"results":"57","hashOfConfig":"48"},{"size":9376,"mtime":1612962109905,"results":"58","hashOfConfig":"48"},{"size":1308,"mtime":1613035603246,"results":"59","hashOfConfig":"48"},{"size":396,"mtime":1612312337810,"results":"60","hashOfConfig":"48"},{"size":1120,"mtime":1612950375725,"results":"61","hashOfConfig":"48"},{"size":353,"mtime":1612945663355,"results":"62","hashOfConfig":"48"},{"size":3134,"mtime":1613052394476,"results":"63","hashOfConfig":"48"},{"size":935,"mtime":1612954167565,"results":"64","hashOfConfig":"48"},{"size":572,"mtime":1612833882690,"results":"65","hashOfConfig":"48"},{"size":334,"mtime":1612961314225,"results":"66","hashOfConfig":"48"},{"size":5045,"mtime":1613017249210,"results":"67","hashOfConfig":"48"},{"size":2271,"mtime":1612844418650,"results":"68","hashOfConfig":"48"},{"size":1466,"mtime":1612953108685,"results":"69","hashOfConfig":"48"},{"size":6152,"mtime":1613015817420,"results":"70","hashOfConfig":"48"},{"size":3613,"mtime":1612962150275,"results":"71","hashOfConfig":"48"},{"size":4377,"mtime":1613015791400,"results":"72","hashOfConfig":"48"},{"size":1050,"mtime":1613015109710,"results":"73","hashOfConfig":"48"},{"size":1200,"mtime":1612917407790,"results":"74","hashOfConfig":"48"},{"size":4641,"mtime":1612953296165,"results":"75","hashOfConfig":"48"},{"size":3664,"mtime":1612935054965,"results":"76","hashOfConfig":"48"},{"size":1681,"mtime":1612953355155,"results":"77","hashOfConfig":"48"},{"size":517,"mtime":1613035542386,"results":"78","hashOfConfig":"48"},{"size":1199,"mtime":1612955300645,"results":"79","hashOfConfig":"48"},{"size":673,"mtime":1612955500785,"results":"80","hashOfConfig":"48"},{"size":2228,"mtime":1613040284516,"results":"81","hashOfConfig":"48"},{"size":1013,"mtime":1613014921740,"results":"82","hashOfConfig":"48"},{"size":3334,"mtime":1613012024970,"results":"83","hashOfConfig":"48"},{"size":2034,"mtime":1613014944780,"results":"84","hashOfConfig":"48"},{"size":4345,"mtime":1613055261426,"results":"85","hashOfConfig":"48"},{"size":1715,"mtime":1613049611836,"results":"86","hashOfConfig":"48"},{"size":465,"mtime":1613035664256,"results":"87","hashOfConfig":"48"},{"size":7831,"mtime":1613055245836,"results":"88","hashOfConfig":"48"},{"size":1127,"mtime":1613049605136,"results":"89","hashOfConfig":"48"},{"size":407,"mtime":1613044786746,"results":"90","hashOfConfig":"48"},{"size":796,"mtime":1613051412796,"results":"91","hashOfConfig":"48"},{"size":1857,"mtime":1613055120226,"results":"92","hashOfConfig":"48"},{"size":812,"mtime":1613052214956,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"11prm6r",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"96"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"96"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"96"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"96"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jonganebski/github/nodcast-front/src/index.tsx",[],["192","193"],"/home/jonganebski/github/nodcast-front/src/apollo.ts",[],"/home/jonganebski/github/nodcast-front/src/constants.ts",[],"/home/jonganebski/github/nodcast-front/src/routers/logged-in-router.tsx",[],"/home/jonganebski/github/nodcast-front/src/routers/logged-out-router.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Home.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Auth.tsx",[],"/home/jonganebski/github/nodcast-front/src/__generated__/globalTypes.ts",[],"/home/jonganebski/github/nodcast-front/src/components/FormError.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/Header.tsx",["194","195"],"/home/jonganebski/github/nodcast-front/src/pages/Podcast.tsx",[],"/home/jonganebski/github/nodcast-front/src/helpers.ts",[],"/home/jonganebski/github/nodcast-front/src/components/App.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/PodcastBlock.tsx",["196","197","198"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { NICO_URL, LYNN_URL, DEFAULT_COVER } from \"../constants\";\nimport { computeTimelapse } from \"../helpers\";\nimport { getCategoriesQueryListner_getCategories_categories_podcasts } from \"../__generated__/getCategoriesQueryListner\";\nimport { PodcastCover } from \"./PodcastCover\";\n\ninterface IPodcastBlock {\n  podcast: getCategoriesQueryListner_getCategories_categories_podcasts;\n  index: number;\n}\n\nconst src = \"\";\n\nexport const PodcastBlock: React.FC<IPodcastBlock> = ({ podcast, index }) => {\n  return (\n    <li className=\"w-28\">\n      <Link to={`/podcasts/${podcast.id}`}>\n        <PodcastCover coverUrl={src} title={podcast.title} />\n        <h5\n          className=\"text-sm overflow-ellipsis overflow-hidden\"\n          style={{\n            display: \"-webkit-box\",\n            WebkitLineClamp: 2,\n            WebkitBoxOrient: \"vertical\",\n          }}\n        >\n          {podcast.title}\n        </h5>\n        <span className=\"text-xs text-gray-500\">\n          {computeTimelapse(podcast.updatedAt)}\n        </span>\n      </Link>\n    </li>\n  );\n};\n","/home/jonganebski/github/nodcast-front/src/components/PodcastBlockSkeleton.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/EpisodeBlock.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/EpisodeBlockSkeleton.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/useSearchPodcastsQuery.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/useMeQuery.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Hosts/Home.tsx",["199","200"],"import { faHeadphones, faPenNib } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { useEffect, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { Button } from \"../../components/Button\";\nimport { PodcastForm } from \"../../components/PodcastForm\";\nimport { RatingStars } from \"../../components/RatingStars\";\nimport { ReviewBlock } from \"../../components/ReviewBlock\";\nimport { ReviewsDrawer } from \"../../components/ReviewsDrawer\";\nimport { useCreatePodcastMutation } from \"../../hooks/mutations/useCreatePodcastMutation\";\nimport { useGetPodcastQuery } from \"../../hooks/useGetPodcastQuery\";\nimport { useMeQuery } from \"../../hooks/useMeQuery\";\n\ninterface IFormProps {\n  title: string;\n  description: string;\n  categories: { id: string | boolean }[];\n}\n\nexport const Home = () => {\n  const { data: userData } = useMeQuery();\n  const [isReviewsOpen, setIsReviewsOpen] = useState(false);\n  const f = useForm<IFormProps>({\n    mode: \"onChange\",\n  });\n  const { getValues } = f;\n\n  const [\n    createPodcastMutation,\n    { loading: createPodcastLoading },\n  ] = useCreatePodcastMutation({ ...f.getValues() });\n\n  const { data, loading } = useGetPodcastQuery();\n\n  const onSubmit = () => {\n    const { categories, title, description } = getValues();\n    const categoryIds = categories.reduce((acc, value) => {\n      if (value.id) {\n        acc.push(+value.id);\n      }\n      return acc;\n    }, [] as number[]);\n    createPodcastMutation({\n      variables: { input: { title, description, categoryIds } },\n    });\n  };\n\n  const [audioRecorder, setAudioRecorder] = useState<MediaRecorder | null>(\n    null\n  );\n\n  useEffect(() => {\n    if (audioRecorder) {\n      // audioRecorder.ondataavailable = (e) => {\n      //   const { data: audioFile } = e;\n      //   const link = document.createElement(\"a\");\n      //   link.href = URL.createObjectURL(audioFile);\n      //   link.download = \"nodcast-recorded.wav\";\n      //   document.body.appendChild(link);\n      //   link.click();\n      // };\n      // audioRecorder.start();\n    }\n  }, [audioRecorder]);\n\n  console.log(data);\n  return (\n    <main className=\"grid gap-y-10 place-items-center w-full max-w-screen-2xl px-1 mx-auto\">\n      {loading ? null : data?.getPodcast.podcast ? (\n        <>\n          <h2 className=\"\">{data.getPodcast.podcast.title}</h2>\n          <div className=\"flex flex-col items-center\">\n            <RatingStars rating={data.getPodcast.podcast.rating ?? 0} />\n          </div>\n          <div\n            className={`w-52 h-52 rounded-full flex items-center justify-center border cursor-pointer shadow-xl active:shadow-inner bg-gray-700`}\n            onClick={async (e) => {\n              if (navigator.mediaDevices?.getUserMedia) {\n                if (audioRecorder) {\n                  // audioRecorder.stop();\n                  setAudioRecorder(null);\n                } else {\n                  try {\n                    const stream = await navigator.mediaDevices.getUserMedia({\n                      audio: true,\n                    });\n                    const audioRecorder = new MediaRecorder(stream);\n                    setAudioRecorder(audioRecorder);\n                  } catch (err) {\n                    console.log(err);\n                  }\n                }\n              } else {\n                alert(\"Audio record is not supported on your browser!\");\n              }\n            }}\n          >\n            <div\n              className={\"w-3 h-3 rounded-full\"}\n              style={{\n                boxShadow: `0px 0px 10px 2px ${\n                  audioRecorder ? \"#ff000d\" : \"#66ff00\"\n                }`,\n                backgroundColor: audioRecorder ? \"#ff000d\" : \"#66ff00\",\n              }}\n            ></div>\n          </div>\n          <div className=\"grid\">\n            <Button\n              text=\"Reviews\"\n              onClick={() => setIsReviewsOpen(true)}\n              icon={faPenNib}\n            />\n            <Button\n              text={`Subscribers: ${data.getPodcast.podcast.subscribersCount}`}\n              icon={faHeadphones}\n            />\n          </div>\n          {userData && (\n            <ReviewsDrawer\n              userData={userData}\n              podcastId={data.getPodcast.podcast.id}\n              podcastCreatorId={userData.me.id}\n              isReviewsOpen={isReviewsOpen}\n              setIsReviewsOpen={setIsReviewsOpen}\n            />\n          )}\n        </>\n      ) : (\n        <>\n          <h2 className=\"mb-5\">Welcome 🙌</h2>\n          <p className=\"text-sm mb-20\">\n            It's happy to see my new host! I hope you to share wonderful\n            experiences with my listeners. This site is developed for learning\n            purpose. Please remember you only can make one podcast channel per\n            one host account.\n          </p>\n          <FormProvider {...f}>\n            <PodcastForm\n              categories={data?.getPodcast.categories}\n              onSubmit={onSubmit}\n            />\n          </FormProvider>\n        </>\n      )}\n    </main>\n  );\n};\n","/home/jonganebski/github/nodcast-front/src/components/CategorySection.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/Button.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/ReviewsDrawer.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/RatingStars.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/ReviewBlock.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/useGetReviewsQuery.tsx",["201"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport { client } from \"../apollo\";\nimport { REVIEW_FRAGMENT } from \"../fragments\";\nimport {\n  getReviewsQuery,\n  getReviewsQueryVariables,\n} from \"../__generated__/getReviewsQuery\";\n\nexport const GET_REVIEWS_QUERY = gql`\n  query getReviewsQuery($input: GetReviewsInput!) {\n    getReviews(input: $input) {\n      ok\n      err\n      currentPage\n      totalPages\n      reviews {\n        ...ReviewParts\n      }\n    }\n  }\n  ${REVIEW_FRAGMENT}\n`;\n\nexport const useGetReviewsLazyQuery = (podcastId: number) => {\n  const onCompleted = (data: getReviewsQuery) => {\n    const {\n      getReviews: { ok, reviews, err, currentPage },\n    } = data;\n    if (ok && reviews) {\n      client.writeQuery<getReviewsQuery, getReviewsQueryVariables>({\n        query: GET_REVIEWS_QUERY,\n        data,\n        variables: { input: { podcastId } },\n      });\n    } else {\n      console.log(err);\n    }\n  };\n\n  return useLazyQuery<getReviewsQuery, getReviewsQueryVariables>(\n    GET_REVIEWS_QUERY,\n    { onCompleted }\n  );\n};\n","/home/jonganebski/github/nodcast-front/src/components/ReviewForm.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/EditProfileModal.tsx",["202","203"],"import { gql, useMutation } from \"@apollo/client\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { client } from \"../apollo\";\nimport {\n  editProfileMutation,\n  editProfileMutationVariables,\n} from \"../__generated__/editProfileMutation\";\nimport { meQuery_me } from \"../__generated__/meQuery\";\nimport {\n  CheckPasswordInput,\n  EmailInput,\n  PasswordInput,\n  UsernameInput,\n} from \"./AuthFormInputs\";\nimport { Button } from \"./Button\";\n\nconst EDIT_PROFILE_MUTATION = gql`\n  mutation editProfileMutation($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      ok\n      err\n    }\n  }\n`;\n\ninterface IFormProps {\n  email: string;\n  username: string;\n  password: string;\n  ckeckPassword: string;\n}\n\ninterface IEditProfileModalProps {\n  isEditProfileOpen: boolean;\n  setIsEditProfileOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  me: meQuery_me;\n}\n\nexport const EditProfileModal: React.FC<IEditProfileModalProps> = ({\n  isEditProfileOpen,\n  setIsEditProfileOpen,\n  me,\n}) => {\n  const f = useForm<IFormProps>({\n    mode: \"onChange\",\n    defaultValues: { email: me.email, username: me.username },\n  });\n\n  const { getValues, reset, handleSubmit, setError } = f;\n\n  useEffect(() => {\n    if (\n      !isEditProfileOpen &&\n      (getValues().email !== me.email || getValues().username !== me.username)\n    ) {\n      reset({ email: me.email, username: me.username });\n    }\n  }, [getValues, isEditProfileOpen, me.email, me.username, reset]);\n\n  const onEditProfileCompleted = (data: editProfileMutation) => {\n    const {\n      editProfile: { ok, err },\n    } = data;\n    if (ok) {\n      const { email, username } = getValues();\n      client.writeFragment<meQuery_me>({\n        id: `Users:${me.id}`,\n        fragment: gql`\n          fragment EditedUser on Users {\n            id\n            email\n            username\n            role\n            subscriptions {\n              id\n            }\n          }\n        `,\n        data: { ...me, email, username },\n      });\n    } else if (err) {\n      if (err.toLowerCase().includes(\"email\")) {\n        setError(\"email\", { message: err });\n      } else if (err.toLowerCase().includes(\"username\")) {\n        setError(\"username\", { message: err });\n      }\n    }\n  };\n\n  const [\n    editProfileMutation,\n    { loading: editProfileLoading, error },\n  ] = useMutation<editProfileMutation, editProfileMutationVariables>(\n    EDIT_PROFILE_MUTATION,\n    { onCompleted: onEditProfileCompleted }\n  );\n\n  const onSubmit = () => {\n    const { email, username, password } = getValues();\n    if (password) {\n      editProfileMutation({\n        variables: { input: { email, username, password } },\n      });\n    } else {\n      editProfileMutation({\n        variables: { input: { email, username } },\n      });\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={`fixed z-10 top-0 left-0 bg-gray-700 w-full h-full transition-all duration-500 ${\n          isEditProfileOpen\n            ? \"opacity-40 cursor-pointer\"\n            : \"opacity-0 pointer-events-none\"\n        }`}\n        onClick={() => setIsEditProfileOpen(false)}\n      />\n      <section\n        className={`fixed z-20 top-48 left-1/2 transform -translate-x-1/2 bg-white p-4 rounded-lg grid gap-y-4 place-items-center transition-all duration-500 ${\n          isEditProfileOpen ? \"opacity-100\" : \"opacity-0 pointer-events-none\"\n        }`}\n      >\n        <FontAwesomeIcon\n          className=\"absolute top-4 right-4 cursor-pointer text-gray-400 hover:text-gray-600\"\n          onClick={() => setIsEditProfileOpen(false)}\n          icon={faTimes}\n        />\n        <h2 className=\"font-semibold text-lg\">Edit profile</h2>\n        <FormProvider {...f}>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"grid gap-y-2 mb-4\">\n              <EmailInput />\n              <UsernameInput />\n            </div>\n            <div className=\"grid gap-y-2 mb-4\">\n              <h4 className=\"text-sm text-gray-600\">\n                Leave empty if you don't want to change password\n              </h4>\n              <PasswordInput isEditMode={true} />\n              <CheckPasswordInput isEditMode={true} />\n            </div>\n            <div className=\"flex justify-end\">\n              <Button\n                text=\"Update\"\n                disabled={editProfileLoading}\n                loading={editProfileLoading}\n              />\n            </div>\n          </form>\n        </FormProvider>\n      </section>\n    </>\n  );\n};\n","/home/jonganebski/github/nodcast-front/src/components/AuthFormInputs.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Subscriptions.tsx",[],"/home/jonganebski/github/nodcast-front/src/fragments.ts",[],"/home/jonganebski/github/nodcast-front/src/pages/Feeds.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/PodcastCover.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Episode.tsx",["204","205"],"/home/jonganebski/github/nodcast-front/src/hooks/useGetPodcastQuery.tsx",["206"],"import { gql, useQuery } from \"@apollo/client\";\nimport { EPISODE_FRAGMENT, REVIEW_FRAGMENT } from \"../fragments\";\nimport {\n  getPodcastQuery,\n  getPodcastQueryVariables,\n} from \"../__generated__/getPodcastQuery\";\n\nexport const GET_PODCAST_QUERY = gql`\n  query getPodcastQuery($input: GetPodcastInput!) {\n    getPodcast(input: $input) {\n      ok\n      err\n      currentPage\n      totalPages\n      myRating {\n        rating\n      }\n      categories {\n        id\n        name\n      }\n      podcast {\n        id\n        title\n        description\n        rating\n        subscribersCount\n        creator {\n          id\n          username\n        }\n        episodes {\n          ...EpisodeParts\n        }\n        subscribers {\n          id\n          username\n        }\n      }\n    }\n  }\n  ${EPISODE_FRAGMENT}\n`;\n\nexport const useGetPodcastQuery = (podcastId?: number) => {\n  return useQuery<getPodcastQuery, getPodcastQueryVariables>(\n    GET_PODCAST_QUERY,\n    {\n      variables: { input: { podcastId } },\n    }\n  );\n};\n","/home/jonganebski/github/nodcast-front/src/components/PodcastForm.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/mutations/useCreatePodcastMutation.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Hosts/Episodes.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/mutations/useCreateEpisodeMutation.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/queries/useGetEpisodesQuery.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/EpisodeForm.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/mutations/useEditEpisodeMutation.tsx",[],"/home/jonganebski/github/nodcast-front/src/api/uploadFile.ts",[],"/home/jonganebski/github/nodcast-front/src/components/ButtonWide.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/Alert.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/mutations/useDeleteEpisodeMutation.tsx",[],{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":9,"column":10,"nodeType":"213","messageId":"214","endLine":9,"endColumn":21},{"ruleId":"211","severity":1,"message":"215","line":23,"column":39,"nodeType":"213","messageId":"214","endLine":23,"endColumn":46},{"ruleId":"211","severity":1,"message":"216","line":3,"column":10,"nodeType":"213","messageId":"214","endLine":3,"endColumn":18},{"ruleId":"211","severity":1,"message":"217","line":3,"column":20,"nodeType":"213","messageId":"214","endLine":3,"endColumn":28},{"ruleId":"211","severity":1,"message":"218","line":3,"column":30,"nodeType":"213","messageId":"214","endLine":3,"endColumn":43},{"ruleId":"211","severity":1,"message":"219","line":7,"column":10,"nodeType":"213","messageId":"214","endLine":7,"endColumn":21},{"ruleId":"211","severity":1,"message":"220","line":29,"column":16,"nodeType":"213","messageId":"214","endLine":29,"endColumn":36},{"ruleId":"211","severity":1,"message":"221","line":27,"column":39,"nodeType":"213","messageId":"214","endLine":27,"endColumn":50},{"ruleId":"211","severity":1,"message":"222","line":4,"column":28,"nodeType":"213","messageId":"214","endLine":4,"endColumn":36},{"ruleId":"211","severity":1,"message":"223","line":95,"column":36,"nodeType":"213","messageId":"214","endLine":95,"endColumn":41},{"ruleId":"211","severity":1,"message":"224","line":9,"column":10,"nodeType":"213","messageId":"214","endLine":9,"endColumn":20},{"ruleId":"211","severity":1,"message":"225","line":14,"column":10,"nodeType":"213","messageId":"214","endLine":14,"endColumn":18},{"ruleId":"211","severity":1,"message":"226","line":2,"column":28,"nodeType":"213","messageId":"214","endLine":2,"endColumn":43},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"@typescript-eslint/no-unused-vars","'PodcastForm' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'NICO_URL' is defined but never used.","'LYNN_URL' is defined but never used.","'DEFAULT_COVER' is defined but never used.","'ReviewBlock' is defined but never used.","'createPodcastLoading' is assigned a value but never used.","'currentPage' is assigned a value but never used.","'useState' is defined but never used.","'error' is assigned a value but never used.","'useMeQuery' is defined but never used.","'UserRole' is defined but never used.","'REVIEW_FRAGMENT' is defined but never used.","no-global-assign","no-unsafe-negation"]