[{"/home/jonganebski/github/nodcast-front/src/index.tsx":"1","/home/jonganebski/github/nodcast-front/src/apollo.ts":"2","/home/jonganebski/github/nodcast-front/src/constants.ts":"3","/home/jonganebski/github/nodcast-front/src/routers/logged-in-router.tsx":"4","/home/jonganebski/github/nodcast-front/src/routers/logged-out-router.tsx":"5","/home/jonganebski/github/nodcast-front/src/pages/Home.tsx":"6","/home/jonganebski/github/nodcast-front/src/pages/Auth.tsx":"7","/home/jonganebski/github/nodcast-front/src/__generated__/globalTypes.ts":"8","/home/jonganebski/github/nodcast-front/src/components/FormError.tsx":"9","/home/jonganebski/github/nodcast-front/src/components/Header.tsx":"10","/home/jonganebski/github/nodcast-front/src/pages/Podcast.tsx":"11","/home/jonganebski/github/nodcast-front/src/helpers.ts":"12","/home/jonganebski/github/nodcast-front/src/components/App.tsx":"13","/home/jonganebski/github/nodcast-front/src/components/PodcastBlock.tsx":"14","/home/jonganebski/github/nodcast-front/src/components/PodcastBlockSkeleton.tsx":"15","/home/jonganebski/github/nodcast-front/src/components/EpisodeBlock.tsx":"16","/home/jonganebski/github/nodcast-front/src/components/EpisodeBlockSkeleton.tsx":"17","/home/jonganebski/github/nodcast-front/src/hooks/useSearchPodcastsQuery.tsx":"18","/home/jonganebski/github/nodcast-front/src/hooks/useMeQuery.tsx":"19","/home/jonganebski/github/nodcast-front/src/pages/Hosts/Dashboard.tsx":"20","/home/jonganebski/github/nodcast-front/src/pages/Hosts/Home.tsx":"21","/home/jonganebski/github/nodcast-front/src/components/CategorySection.tsx":"22","/home/jonganebski/github/nodcast-front/src/components/Button.tsx":"23","/home/jonganebski/github/nodcast-front/src/components/ReviewsDrawer.tsx":"24","/home/jonganebski/github/nodcast-front/src/components/RatingStars.tsx":"25","/home/jonganebski/github/nodcast-front/src/components/ReviewBlock.tsx":"26","/home/jonganebski/github/nodcast-front/src/hooks/useGetReviewsQuery.tsx":"27","/home/jonganebski/github/nodcast-front/src/components/ReviewForm.tsx":"28","/home/jonganebski/github/nodcast-front/src/components/EditProfileModal.tsx":"29","/home/jonganebski/github/nodcast-front/src/components/AuthFormInputs.tsx":"30","/home/jonganebski/github/nodcast-front/src/pages/Subscriptions.tsx":"31","/home/jonganebski/github/nodcast-front/src/fragments.ts":"32","/home/jonganebski/github/nodcast-front/src/pages/Feeds.tsx":"33","/home/jonganebski/github/nodcast-front/src/components/PodcastCover.tsx":"34","/home/jonganebski/github/nodcast-front/src/pages/Episode.tsx":"35","/home/jonganebski/github/nodcast-front/src/hooks/useGetPodcastQuery.tsx":"36"},{"size":512,"mtime":1612314416400,"results":"37","hashOfConfig":"38"},{"size":965,"mtime":1612943451115,"results":"39","hashOfConfig":"38"},{"size":1701,"mtime":1612965668415,"results":"40","hashOfConfig":"38"},{"size":1683,"mtime":1612957800115,"results":"41","hashOfConfig":"38"},{"size":371,"mtime":1612957810995,"results":"42","hashOfConfig":"38"},{"size":1728,"mtime":1612944094895,"results":"43","hashOfConfig":"38"},{"size":6322,"mtime":1612934377145,"results":"44","hashOfConfig":"38"},{"size":1542,"mtime":1612966604275,"results":"45","hashOfConfig":"38"},{"size":220,"mtime":1612315663360,"results":"46","hashOfConfig":"38"},{"size":5081,"mtime":1612960846495,"results":"47","hashOfConfig":"38"},{"size":9376,"mtime":1612962109905,"results":"48","hashOfConfig":"38"},{"size":839,"mtime":1612156735750,"results":"49","hashOfConfig":"38"},{"size":396,"mtime":1612312337810,"results":"50","hashOfConfig":"38"},{"size":1120,"mtime":1612950375725,"results":"51","hashOfConfig":"38"},{"size":353,"mtime":1612945663355,"results":"52","hashOfConfig":"38"},{"size":1692,"mtime":1612955290195,"results":"53","hashOfConfig":"38"},{"size":935,"mtime":1612954167565,"results":"54","hashOfConfig":"38"},{"size":572,"mtime":1612833882690,"results":"55","hashOfConfig":"38"},{"size":334,"mtime":1612961314225,"results":"56","hashOfConfig":"38"},{"size":86,"mtime":1612743746490,"results":"57","hashOfConfig":"38"},{"size":6518,"mtime":1612967748195,"results":"58","hashOfConfig":"38"},{"size":2271,"mtime":1612844418650,"results":"59","hashOfConfig":"38"},{"size":1466,"mtime":1612953108685,"results":"60","hashOfConfig":"38"},{"size":6320,"mtime":1612930424035,"results":"61","hashOfConfig":"38"},{"size":3613,"mtime":1612962150275,"results":"62","hashOfConfig":"38"},{"size":4325,"mtime":1612957162725,"results":"63","hashOfConfig":"38"},{"size":1078,"mtime":1612914449520,"results":"64","hashOfConfig":"38"},{"size":1200,"mtime":1612917407790,"results":"65","hashOfConfig":"38"},{"size":4641,"mtime":1612953296165,"results":"66","hashOfConfig":"38"},{"size":3664,"mtime":1612935054965,"results":"67","hashOfConfig":"38"},{"size":1681,"mtime":1612953355155,"results":"68","hashOfConfig":"38"},{"size":317,"mtime":1612949086865,"results":"69","hashOfConfig":"38"},{"size":1199,"mtime":1612955300645,"results":"70","hashOfConfig":"38"},{"size":673,"mtime":1612955500785,"results":"71","hashOfConfig":"38"},{"size":1979,"mtime":1612956269965,"results":"72","hashOfConfig":"38"},{"size":932,"mtime":1612964090355,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"11prm6r",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jonganebski/github/nodcast-front/src/index.tsx",[],["151","152"],"/home/jonganebski/github/nodcast-front/src/apollo.ts",[],"/home/jonganebski/github/nodcast-front/src/constants.ts",[],"/home/jonganebski/github/nodcast-front/src/routers/logged-in-router.tsx",[],"/home/jonganebski/github/nodcast-front/src/routers/logged-out-router.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Home.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Auth.tsx",[],"/home/jonganebski/github/nodcast-front/src/__generated__/globalTypes.ts",[],"/home/jonganebski/github/nodcast-front/src/components/FormError.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/Header.tsx",["153"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { isLoggedInVar } from \"../apollo\";\nimport { TOKEN_NAME } from \"../constants\";\nimport { useSearchPodcastsQuery } from \"../hooks/useSearchPodcastsQuery\";\nimport { UserRole } from \"../__generated__/globalTypes\";\nimport { meQuery_me } from \"../__generated__/meQuery\";\nimport { EditProfileModal } from \"./EditProfileModal\";\n\ninterface IHeaderProps {\n  me: meQuery_me | undefined;\n}\n\nexport const Header: React.FC<IHeaderProps> = ({ me }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  const [isEditProfileOpen, setIsEditProfileOpen] = useState(false);\n  const timeoutIdRef = useRef<any>();\n  const ulRef = useRef<HTMLUListElement | null>(null);\n  const [isUserPopup, setIsUserPopup] = useState(false);\n  const history = useHistory();\n  const [searchPodcastsQuery, { data, loading }] = useSearchPodcastsQuery();\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    setSearchTerm(e.currentTarget.value);\n  };\n\n  useEffect(() => {\n    const hide = () => {\n      setShowSearchResults(false);\n      setIsUserPopup(false);\n    };\n    document.addEventListener(\"click\", hide);\n    return () => document.removeEventListener(\"click\", hide);\n  }, []);\n\n  useEffect(() => {\n    if (2 < searchTerm.length) {\n      setShowSearchResults(true);\n    } else {\n      setShowSearchResults(false);\n    }\n  }, [searchTerm.length]);\n\n  useEffect(() => {\n    if (2 < searchTerm.length) {\n      clearTimeout(timeoutIdRef.current);\n      timeoutIdRef.current = setTimeout(() => {\n        searchPodcastsQuery({\n          variables: { input: { page: 1, titleQuery: searchTerm } },\n        });\n      }, 1000);\n    }\n  }, [searchPodcastsQuery, searchTerm]);\n\n  return (\n    <header\n      className=\"py-2 w-full grid place-items-center\"\n      style={{ gridTemplateColumns: \"1fr 8fr 1fr\" }}\n    >\n      <div></div>\n      <div className=\"relative w-full max-w-screen-md\">\n        <input\n          className=\"p-3 outline-none bg-gray-100 w-full rounded-md focus:shadow-md focus:bg-white transition-all pointer-events-auto\"\n          style={{ pointerEvents: \"all\" }}\n          placeholder=\"Search podcast\"\n          onChange={onChange}\n          value={searchTerm}\n          onClick={(e) => {\n            e.stopPropagation();\n            setShowSearchResults(true);\n          }}\n        />\n        {showSearchResults && (\n          <ul\n            className=\"grid absolute z-10 border rounded-b-md overflow-hidden w-full gap-px bg-gray-200 shadow-md\"\n            ref={ulRef}\n          >\n            {data?.searchPodcasts.podcasts?.map((podcast) => {\n              return (\n                <li\n                  className=\"p-3 flex justify-between bg-transparent w-full cursor-pointer bg-white hover:bg-gray-100\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    history.push(`/podcasts/${podcast.id}`);\n                  }}\n                  key={podcast.id}\n                >\n                  <span className=\"text-gray-700\">{podcast.title}</span>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n      <div\n        className=\"relative w-9 h-9 rounded-full flex items-center justify-center bg-gray-600 cursor-pointer\"\n        onClick={(e) => {\n          e.stopPropagation();\n          setIsUserPopup(!isUserPopup);\n        }}\n      >\n        {/* <image /> */}\n        <span className=\"text-white\">{me?.email[0].toUpperCase()}</span>\n        {isUserPopup && me && (\n          <ul className=\"absolute grid gap-px bg-gray-300 top-12 right-0 border rounded-md shadow-lg whitespace-nowrap overflow-hidden text-sm\">\n            {me.role === UserRole.Listener && (\n              <li\n                className=\"px-10 py-3 bg-white hover:bg-gray-100\"\n                onClick={() => history.push(\"/feeds\")}\n              >\n                My feed\n              </li>\n            )}\n            {me.role === UserRole.Listener && (\n              <li\n                className=\"px-10 py-3 bg-white hover:bg-gray-100\"\n                onClick={() => history.push(\"/subscriptions\")}\n              >\n                Subscriptions\n              </li>\n            )}\n            <li\n              className=\"px-10 py-3 bg-white hover:bg-gray-100\"\n              onClick={() => setIsEditProfileOpen(true)}\n            >\n              Edit profile\n            </li>\n            <li\n              className=\"px-10 py-3 bg-white hover:bg-gray-100\"\n              onClick={() => {\n                localStorage.removeItem(TOKEN_NAME);\n                isLoggedInVar(false);\n                history.go(0);\n              }}\n            >\n              Log out\n            </li>\n          </ul>\n        )}\n      </div>\n      {me && (\n        <EditProfileModal\n          isEditProfileOpen={isEditProfileOpen}\n          setIsEditProfileOpen={setIsEditProfileOpen}\n          me={me}\n        />\n      )}\n    </header>\n  );\n};\n","/home/jonganebski/github/nodcast-front/src/pages/Podcast.tsx",[],"/home/jonganebski/github/nodcast-front/src/helpers.ts",[],"/home/jonganebski/github/nodcast-front/src/components/App.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/PodcastBlock.tsx",["154","155","156"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { NICO_URL, LYNN_URL, DEFAULT_COVER } from \"../constants\";\nimport { computeTimelapse } from \"../helpers\";\nimport { getCategoriesQueryListner_getCategories_categories_podcasts } from \"../__generated__/getCategoriesQueryListner\";\nimport { PodcastCover } from \"./PodcastCover\";\n\ninterface IPodcastBlock {\n  podcast: getCategoriesQueryListner_getCategories_categories_podcasts;\n  index: number;\n}\n\nconst src = \"\";\n\nexport const PodcastBlock: React.FC<IPodcastBlock> = ({ podcast, index }) => {\n  return (\n    <li className=\"w-28\">\n      <Link to={`/podcasts/${podcast.id}`}>\n        <PodcastCover coverUrl={src} title={podcast.title} />\n        <h5\n          className=\"text-sm overflow-ellipsis overflow-hidden\"\n          style={{\n            display: \"-webkit-box\",\n            WebkitLineClamp: 2,\n            WebkitBoxOrient: \"vertical\",\n          }}\n        >\n          {podcast.title}\n        </h5>\n        <span className=\"text-xs text-gray-500\">\n          {computeTimelapse(podcast.updatedAt)}\n        </span>\n      </Link>\n    </li>\n  );\n};\n","/home/jonganebski/github/nodcast-front/src/components/PodcastBlockSkeleton.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/EpisodeBlock.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/EpisodeBlockSkeleton.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/useSearchPodcastsQuery.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/useMeQuery.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Hosts/Dashboard.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Hosts/Home.tsx",["157","158"],"/home/jonganebski/github/nodcast-front/src/components/CategorySection.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/Button.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/ReviewsDrawer.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/RatingStars.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/ReviewBlock.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/useGetReviewsQuery.tsx",["159"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport { client } from \"../apollo\";\nimport {\n  getReviewsQuery,\n  getReviewsQueryVariables,\n} from \"../__generated__/getReviewsQuery\";\n\nexport const GET_REVIEWS_QUERY = gql`\n  query getReviewsQuery($input: GetReviewsInput!) {\n    getReviews(input: $input) {\n      ok\n      err\n      currentPage\n      totalPages\n      reviews {\n        id\n        text\n        createdAt\n        updatedAt\n        creator {\n          id\n          username\n        }\n      }\n    }\n  }\n`;\n\nexport const useGetReviewsLazyQuery = (podcastId: number) => {\n  const onCompleted = (data: getReviewsQuery) => {\n    const {\n      getReviews: { ok, reviews, err, currentPage },\n    } = data;\n    if (ok && reviews) {\n      client.writeQuery<getReviewsQuery, getReviewsQueryVariables>({\n        query: GET_REVIEWS_QUERY,\n        data,\n        variables: { input: { podcastId } },\n      });\n    } else {\n      console.log(err);\n    }\n  };\n\n  return useLazyQuery<getReviewsQuery, getReviewsQueryVariables>(\n    GET_REVIEWS_QUERY,\n    { onCompleted }\n  );\n};\n","/home/jonganebski/github/nodcast-front/src/components/ReviewForm.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/EditProfileModal.tsx",["160","161"],"import { gql, useMutation } from \"@apollo/client\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { client } from \"../apollo\";\nimport {\n  editProfileMutation,\n  editProfileMutationVariables,\n} from \"../__generated__/editProfileMutation\";\nimport { meQuery_me } from \"../__generated__/meQuery\";\nimport {\n  CheckPasswordInput,\n  EmailInput,\n  PasswordInput,\n  UsernameInput,\n} from \"./AuthFormInputs\";\nimport { Button } from \"./Button\";\n\nconst EDIT_PROFILE_MUTATION = gql`\n  mutation editProfileMutation($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      ok\n      err\n    }\n  }\n`;\n\ninterface IFormProps {\n  email: string;\n  username: string;\n  password: string;\n  ckeckPassword: string;\n}\n\ninterface IEditProfileModalProps {\n  isEditProfileOpen: boolean;\n  setIsEditProfileOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  me: meQuery_me;\n}\n\nexport const EditProfileModal: React.FC<IEditProfileModalProps> = ({\n  isEditProfileOpen,\n  setIsEditProfileOpen,\n  me,\n}) => {\n  const f = useForm<IFormProps>({\n    mode: \"onChange\",\n    defaultValues: { email: me.email, username: me.username },\n  });\n\n  const { getValues, reset, handleSubmit, setError } = f;\n\n  useEffect(() => {\n    if (\n      !isEditProfileOpen &&\n      (getValues().email !== me.email || getValues().username !== me.username)\n    ) {\n      reset({ email: me.email, username: me.username });\n    }\n  }, [getValues, isEditProfileOpen, me.email, me.username, reset]);\n\n  const onEditProfileCompleted = (data: editProfileMutation) => {\n    const {\n      editProfile: { ok, err },\n    } = data;\n    if (ok) {\n      const { email, username } = getValues();\n      client.writeFragment<meQuery_me>({\n        id: `Users:${me.id}`,\n        fragment: gql`\n          fragment EditedUser on Users {\n            id\n            email\n            username\n            role\n            subscriptions {\n              id\n            }\n          }\n        `,\n        data: { ...me, email, username },\n      });\n    } else if (err) {\n      if (err.toLowerCase().includes(\"email\")) {\n        setError(\"email\", { message: err });\n      } else if (err.toLowerCase().includes(\"username\")) {\n        setError(\"username\", { message: err });\n      }\n    }\n  };\n\n  const [\n    editProfileMutation,\n    { loading: editProfileLoading, error },\n  ] = useMutation<editProfileMutation, editProfileMutationVariables>(\n    EDIT_PROFILE_MUTATION,\n    { onCompleted: onEditProfileCompleted }\n  );\n\n  const onSubmit = () => {\n    const { email, username, password } = getValues();\n    if (password) {\n      editProfileMutation({\n        variables: { input: { email, username, password } },\n      });\n    } else {\n      editProfileMutation({\n        variables: { input: { email, username } },\n      });\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={`fixed z-10 top-0 left-0 bg-gray-700 w-full h-full transition-all duration-500 ${\n          isEditProfileOpen\n            ? \"opacity-40 cursor-pointer\"\n            : \"opacity-0 pointer-events-none\"\n        }`}\n        onClick={() => setIsEditProfileOpen(false)}\n      />\n      <section\n        className={`fixed z-20 top-48 left-1/2 transform -translate-x-1/2 bg-white p-4 rounded-lg grid gap-y-4 place-items-center transition-all duration-500 ${\n          isEditProfileOpen ? \"opacity-100\" : \"opacity-0 pointer-events-none\"\n        }`}\n      >\n        <FontAwesomeIcon\n          className=\"absolute top-4 right-4 cursor-pointer text-gray-400 hover:text-gray-600\"\n          onClick={() => setIsEditProfileOpen(false)}\n          icon={faTimes}\n        />\n        <h2 className=\"font-semibold text-lg\">Edit profile</h2>\n        <FormProvider {...f}>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"grid gap-y-2 mb-4\">\n              <EmailInput />\n              <UsernameInput />\n            </div>\n            <div className=\"grid gap-y-2 mb-4\">\n              <h4 className=\"text-sm text-gray-600\">\n                Leave empty if you don't want to change password\n              </h4>\n              <PasswordInput isEditMode={true} />\n              <CheckPasswordInput isEditMode={true} />\n            </div>\n            <div className=\"flex justify-end\">\n              <Button\n                text=\"Update\"\n                disabled={editProfileLoading}\n                loading={editProfileLoading}\n              />\n            </div>\n          </form>\n        </FormProvider>\n      </section>\n    </>\n  );\n};\n","/home/jonganebski/github/nodcast-front/src/components/AuthFormInputs.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Subscriptions.tsx",[],"/home/jonganebski/github/nodcast-front/src/fragments.ts",[],"/home/jonganebski/github/nodcast-front/src/pages/Feeds.tsx",[],"/home/jonganebski/github/nodcast-front/src/components/PodcastCover.tsx",[],"/home/jonganebski/github/nodcast-front/src/pages/Episode.tsx",[],"/home/jonganebski/github/nodcast-front/src/hooks/useGetPodcastQuery.tsx",[],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"167","line":22,"column":39,"nodeType":"168","messageId":"169","endLine":22,"endColumn":46},{"ruleId":"166","severity":1,"message":"170","line":3,"column":10,"nodeType":"168","messageId":"169","endLine":3,"endColumn":18},{"ruleId":"166","severity":1,"message":"171","line":3,"column":20,"nodeType":"168","messageId":"169","endLine":3,"endColumn":28},{"ruleId":"166","severity":1,"message":"172","line":3,"column":30,"nodeType":"168","messageId":"169","endLine":3,"endColumn":43},{"ruleId":"166","severity":1,"message":"173","line":94,"column":16,"nodeType":"168","messageId":"169","endLine":94,"endColumn":36},{"ruleId":"166","severity":1,"message":"167","line":100,"column":17,"nodeType":"168","messageId":"169","endLine":100,"endColumn":24},{"ruleId":"166","severity":1,"message":"174","line":32,"column":39,"nodeType":"168","messageId":"169","endLine":32,"endColumn":50},{"ruleId":"166","severity":1,"message":"175","line":4,"column":28,"nodeType":"168","messageId":"169","endLine":4,"endColumn":36},{"ruleId":"166","severity":1,"message":"176","line":95,"column":36,"nodeType":"168","messageId":"169","endLine":95,"endColumn":41},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"@typescript-eslint/no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'NICO_URL' is defined but never used.","'LYNN_URL' is defined but never used.","'DEFAULT_COVER' is defined but never used.","'createPodcastLoading' is assigned a value but never used.","'currentPage' is assigned a value but never used.","'useState' is defined but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]